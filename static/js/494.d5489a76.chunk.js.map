{"version":3,"file":"static/js/494.d5489a76.chunk.js","mappings":"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","sources":["components/views/contactsView/ContactsList/ContactsList.styled.js","components/views/contactsView/CreateContactForm/CreateContactForm.styled.js","components/views/contactsView/CreateContactForm/CreateContactForm.jsx","components/views/contactsView/Contact/Contact.styled.js","components/views/contactsView/Contact/Contact.jsx","components/views/contactsView/ContactsList/ContactsList.jsx","components/views/contactsView/Filter/Filter.styled.js","components/views/contactsView/Filter/Filter.jsx","views/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactsListStyled = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  padding: 0 4px;\n  gap: 12px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints[1]}) {\n    gap: 20px;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints[2]}) {\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n  }\n`;\n\nexport const CreateContactFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  > p {\n    color: ${({ theme }) => theme.colors.main};\n  }\n`;\n","// import { ButtonStyled } from 'components/common/Button';\nimport styled from 'styled-components';\n\nexport const CreateContactFormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  gap: 30px;\n  width: 300px;\n`;\n\n// const CreateContactButton = styled(ButtonStyled)`\n//   background-color: ${({ disabled }) => disabled && 'transparent'};\n// `;\n","import { Button } from '@mui/material';\nimport { LoadingIcon } from 'components/common';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useCreateContactMutation } from 'redux/contacts';\nimport { closeModal } from 'redux/modal';\nimport { CreateContactFormLabel } from '../ContactsList/ContactsList.styled';\nimport { CreateContactFormStyled } from './CreateContactForm.styled';\n\nexport const CreateContactForm = () => {\n  const [createContact, { isLoading, isSuccess }] = useCreateContactMutation();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value.trim();\n    const number = form.elements.number.value.trim();\n\n    if (!name || !number) {\n      return toast.error('Please fill name and phone');\n    }\n\n    createContact({ name, number });\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.success('Contact created');\n      dispatch(closeModal());\n    }\n  }, [dispatch, isSuccess]);\n\n  return (\n    <CreateContactFormStyled onSubmit={handleSubmit} autoComplete=\"off\">\n      <CreateContactFormLabel>\n        <p>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. e.g. Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </CreateContactFormLabel>\n\n      <CreateContactFormLabel>\n        <p>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and may start with +\"\n          required\n        />\n      </CreateContactFormLabel>\n\n      <Button type=\"submit\" variant=\"contained\" disabled={isLoading}>\n        {isLoading && <LoadingIcon />}\n        Create Contact\n      </Button>\n    </CreateContactFormStyled>\n  );\n};\n","import { ButtonStyled } from 'components/common/Button';\nimport styled from 'styled-components';\n\nexport const ContactStyled = styled.li`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  padding: 4px 16px 4px 4px;\n  background-color: ${({ theme }) => theme.colors.contact.bg};\n`;\n\nexport const ContactEditName = styled.input`\n  width: 55%;\n`;\n\nexport const ContactEditNumber = styled.input`\n  width: 40%;\n`;\n\nexport const DeleteContactButton = styled(ButtonStyled)`\n  position: absolute;\n  top: -8px;\n  right: -12px;\n`;\n","import {\n  useDeleteContactMutation,\n  useUpdateContactMutation,\n} from 'redux/contacts';\n\nimport {\n  ContactEditName,\n  ContactEditNumber,\n  ContactStyled,\n  DeleteContactButton,\n} from './Contact.styled';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nexport const Contact = ({ id, name, number }) => {\n  const [updateContact, { isLoading: isUpdating }] = useUpdateContactMutation();\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const [localName, setLocalName] = useState(name);\n  const [localNumber, setLocalNumber] = useState(number);\n\n  const onSubmitEdit = e =>\n    updateContact({ id, [e.target.name]: e.target.value });\n\n  const onDeleteContact = () => deleteContact(id);\n\n  const disabled = isUpdating || isDeleting;\n\n  return (\n    <ContactStyled>\n      <ContactEditName\n        type=\"text\"\n        name=\"name\"\n        value={localName}\n        onChange={e => setLocalName(e.target.value)}\n        onBlur={onSubmitEdit}\n        disabled={disabled}\n      />\n\n      <ContactEditNumber\n        type=\"tel\"\n        name=\"number\"\n        value={localNumber}\n        onChange={e => setLocalNumber(e.target.value)}\n        onBlur={onSubmitEdit}\n        disabled={disabled}\n      />\n\n      <DeleteContactButton onClick={onDeleteContact} disabled={disabled}>\n        <AiOutlineClose size={20} />\n      </DeleteContactButton>\n    </ContactStyled>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { ContactsListStyled } from './ContactsList.styled';\nimport { Contact } from '../Contact';\nimport PropTypes from 'prop-types';\n\nexport const ContactsList = ({ contacts }) =>\n  console.log(contacts) || (\n    <ContactsListStyled>\n      {contacts.map(({ id, name, number }) => (\n        <Contact key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactsListStyled>\n  );\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n","import { LoadingIcon } from 'components/common';\nimport { ButtonStyled } from 'components/common/Button';\nimport styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 280px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 100%;\n  font-size: inherit;\n  padding: 4px;\n  background-color: ${({ theme }) => theme.colors.bgProjectCard};\n`;\n\nexport const ClearFilterButton = styled(ButtonStyled)`\n  color: ${({ theme: { colors } }) => colors.button.secondary.fg};\n  background-color: ${({ theme: { colors } }) => colors.button.secondary.bg};\n`;\n\nexport const LoadingIconAbsolute = styled(LoadingIcon).attrs({\n  width: 30,\n  height: 20,\n})`\n  position: absolute;\n  right: -28px;\n`;\n\nexport const FilterDescription = styled.p`\n  margin-bottom: 20px;\n`;\n","import {\n  ClearFilterButton,\n  FilterInput,\n  FilterLabel,\n  FilterStyled,\n  LoadingIconAbsolute,\n} from './Filter.styled';\n\nimport PropTypes from 'prop-types';\n\nexport const Filter = ({ filter, setFilter, isFetching }) => {\n  const onSetFilter = e => setFilter(e.target.value);\n  const clearFilter = () => setFilter('');\n\n  return (\n    <FilterStyled>\n      <FilterLabel>\n        <FilterInput value={filter} onChange={onSetFilter} />\n      </FilterLabel>\n\n      <ClearFilterButton onClick={clearFilter}>Clear</ClearFilterButton>\n\n      {isFetching && <LoadingIconAbsolute />}\n    </FilterStyled>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n};\n","import { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { getVisibleContacts, useReadContactsQuery } from 'redux/contacts';\nimport { openModal } from 'redux/modal';\nimport { useLang } from 'hooks';\n\nimport { AiFillPlusCircle } from 'react-icons/ai';\n\nimport { Container, Modal, Section } from 'components/common';\nimport {\n  ContactsList,\n  CreateContactForm,\n  Filter,\n} from 'components/views/contactsView';\nimport { FilterDescription } from 'components/views/contactsView/Filter/Filter.styled';\n\nimport styled from 'styled-components';\n\nimport { Button } from '@mui/material';\nconst ContactsContainer = styled(Container)``;\n\nconst FilterContainer = styled.div`\n  display: flex;\n  gap: 50px;\n  margin-bottom: 30px;\n`;\n\nconst ContactsView = () => {\n  const { data: contacts, isFetching } = useReadContactsQuery();\n  const lang = useLang();\n  const dispatch = useDispatch();\n  const onModalOpen = () => dispatch(openModal());\n\n  const [filter, setFilter] = useState('');\n  const visibleContacts = useMemo(\n    () => getVisibleContacts(contacts, filter),\n    [contacts, filter]\n  );\n\n  return (\n    <Section>\n      <ContactsContainer>\n        <h1>Contacts</h1>\n\n        <FilterDescription>{lang.contactsView.filterDesc}</FilterDescription>\n\n        <FilterContainer>\n          <Filter\n            isFetching={isFetching}\n            filter={filter}\n            setFilter={setFilter}\n          />\n\n          <Button color=\"info\" variant=\"contained\" onClick={onModalOpen}>\n            <AiFillPlusCircle size={24} />\n          </Button>\n        </FilterContainer>\n\n        <Modal>\n          <CreateContactForm />\n        </Modal>\n\n        {contacts && <ContactsList contacts={visibleContacts} />}\n      </ContactsContainer>\n    </Section>\n  );\n};\n\nContactsView.propTypes = {};\n\nexport default ContactsView;\n"],"names":["ContactsListStyled","styled","theme","breakpoints","CreateContactFormLabel","colors","main","CreateContactFormStyled","CreateContactForm","useCreateContactMutation","createContact","isLoading","isSuccess","dispatch","useDispatch","useEffect","toast","closeModal","onSubmit","e","preventDefault","form","target","name","elements","value","trim","number","reset","autoComplete","type","pattern","title","required","Button","variant","disabled","ContactStyled","contact","bg","ContactEditName","ContactEditNumber","DeleteContactButton","ButtonStyled","Contact","id","useUpdateContactMutation","updateContact","isUpdating","useDeleteContactMutation","deleteContact","isDeleting","useState","localName","setLocalName","localNumber","setLocalNumber","onSubmitEdit","onChange","onBlur","onClick","size","ContactsList","contacts","console","log","map","FilterStyled","FilterLabel","FilterInput","bgProjectCard","ClearFilterButton","button","secondary","fg","LoadingIconAbsolute","LoadingIcon","attrs","width","height","FilterDescription","Filter","filter","setFilter","isFetching","ContactsContainer","Container","FilterContainer","useReadContactsQuery","data","lang","useLang","visibleContacts","useMemo","getVisibleContacts","contactsView","filterDesc","color","openModal"],"sourceRoot":""}
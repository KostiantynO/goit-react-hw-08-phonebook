{"version":3,"file":"static/js/198.1107e065.chunk.js","mappings":"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","sources":["components/views/authView/AuthViewContainer.styled.js","components/common/Button/ButtonStyled.js","components/views/authView/RegisterForm/AuthForm.styled.js","components/views/authView/RegisterForm/RegisterForm.jsx","components/views/authView/LoginForm/LoginForm.jsx","views/RegisterView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'components/common';\n\nexport const AuthViewContainer = styled(Container)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  height: calc(100vh - 60px);\n  margin-top: 100px;\n`;\n","import styled from 'styled-components';\n\nexport const ButtonStyled = styled.button.attrs(type => ({\n  type: type ? type : 'button',\n}))`\n  display: flex;\n  padding: 12px 20px;\n  font-size: 1rem;\n  font-weight: 700;\n  color: ${({ theme }) => theme.colors.text};\n  background: ${({ theme }) => theme.colors.nav};\n  /* border: 1px solid ${({ theme }) => theme.colors.border}; */\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition};\n  transition-property: color, background-color;\n  border-radius: 4px;\n\n  :hover {\n    color: ${({ theme }) => theme.colors.bg};\n    background-color: ${({ theme }) => theme.colors.accent};\n  }\n\n  :focus {\n    background-color: ${({ theme }) => theme.colors.accent};\n  }\n`;\n","import { ButtonStyled } from 'components/common/Button';\nimport styled from 'styled-components';\n\nexport const AuthFormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  max-width: 280px;\n`;\n\nexport const AuthFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const AuthFormLabelText = styled.label`\n  text-transform: capitalize;\n  transition: ${({ theme }) => theme.transition};\n  transition-property: color;\n`;\n\nexport const AuthFormInput = styled.input`\n  padding: 4px 8px;\n  font-size: 1.4rem;\n\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme: { colors, mode } }) =>\n    mode === 'dark' ? colors.border : colors.bg};\n\n  border-radius: 4px;\n  outline: none;\n  transition: ${({ theme }) => theme.transition};\n  transition-property: color, background-color, box-shadow;\n\n  :focus {\n    box-shadow: 1px 2px 4px 2px ${({ theme }) => theme.colors.accent};\n  }\n`;\n\nexport const AuthButtonStyled = styled(ButtonStyled)`\n  align-self: center;\n  margin-top: 24px;\n  text-transform: uppercase;\n`;\n","// import PropTypes from 'prop-types'\n\nimport { useLang } from 'hooks';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport authOperations from 'redux/auth/authOperations';\n\nimport {\n  AuthButtonStyled,\n  AuthFormInput,\n  AuthFormLabel,\n  AuthFormStyled,\n  AuthFormLabelText,\n} from './AuthForm.styled';\n\nexport const RegisterForm = () => {\n  const lang = useLang();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value.trim();\n    const email = form.elements.email.value.trim();\n    const password = form.elements.password.value.trim();\n    if (!name || !email || !password) {\n      return toast.error(lang.authForm.formError);\n    }\n    dispatch(authOperations.register({ name, email, password }));\n    form.reset();\n  };\n\n  return (\n    <AuthFormStyled onSubmit={handleSubmit}>\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.name}</AuthFormLabelText>\n        <AuthFormInput autoComplete=\"name\" type=\"text\" name=\"name\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.email}</AuthFormLabelText>\n        <AuthFormInput autoComplete=\"email\" type=\"email\" name=\"email\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.password}</AuthFormLabelText>\n        <AuthFormInput\n          autoComplete=\"new-password\"\n          type=\"password\"\n          name=\"password\"\n        />\n      </AuthFormLabel>\n\n      <AuthButtonStyled type=\"submit\">\n        {lang.registrationForm.registerButtonText}\n      </AuthButtonStyled>\n    </AuthFormStyled>\n  );\n};\n\nRegisterForm.propTypes = {};\n","// import PropTypes from 'prop-types'\n\nimport { useLang } from 'hooks';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport authOperations from 'redux/auth/authOperations';\n\nimport {\n  AuthButtonStyled,\n  AuthFormInput,\n  AuthFormLabel,\n  AuthFormStyled,\n  AuthFormLabelText,\n} from '../RegisterForm/AuthForm.styled';\n\nexport const LoginForm = () => {\n  const lang = useLang();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const email = form.elements.email.value.trim();\n    const password = form.elements.password.value.trim();\n    if (!email || !password) {\n      return toast.error(lang.authForm.formError);\n    }\n    dispatch(authOperations.register({ email, password }));\n    form.reset();\n  };\n\n  return (\n    <AuthFormStyled onSubmit={handleSubmit}>\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.email}</AuthFormLabelText>\n        <AuthFormInput autoComplete=\"\" type=\"email\" name=\"email\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.password}</AuthFormLabelText>\n        <AuthFormInput\n          autoComplete=\"current-password\"\n          type=\"password\"\n          name=\"password\"\n        />\n      </AuthFormLabel>\n\n      <AuthButtonStyled type=\"submit\">\n        {lang.loginForm.loginButtonText}\n      </AuthButtonStyled>\n    </AuthFormStyled>\n  );\n};\n\nLoginForm.propTypes = {};\n","import { AuthViewContainer, RegisterForm } from 'components/views';\nimport { useLang } from 'hooks';\nimport React from 'react';\n// import PropTypes from 'prop-types';\n\nconst RegisterView = props => {\n  const lang = useLang();\n  return (\n    <AuthViewContainer>\n      <p>{lang.registerView.currentPage}</p>\n\n      <RegisterForm />\n    </AuthViewContainer>\n  );\n};\n\nRegisterView.propTypes = {};\n\nexport default RegisterView;\n"],"names":["AuthViewContainer","styled","Container","ButtonStyled","type","theme","colors","text","nav","border","transition","bg","accent","AuthFormStyled","AuthFormLabel","AuthFormLabelText","AuthFormInput","mode","AuthButtonStyled","RegisterForm","lang","useLang","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","name","elements","value","trim","email","password","toast","authForm","formError","authOperations","reset","autoComplete","registrationForm","registerButtonText","LoginForm","loginForm","loginButtonText","props","registerView","currentPage"],"sourceRoot":""}
{"version":3,"file":"static/js/198.2b540a3d.chunk.js","mappings":"+RAGaA,GAAoBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,qJ,UCDjBE,EAA0BF,EAAAA,GAAAA,IAAH,gH,oBCGvBG,EAAoB,WAC/B,IAAMC,GAAOC,EAAAA,EAAAA,MAEb,OACE,UAACH,EAAD,YACE,SAAC,IAAD,CAAeI,GAAG,YAAlB,SACGF,EAAKG,aAAaC,eAErB,SAAC,IAAD,CAAeF,GAAG,SAAlB,SAA4BF,EAAKK,UAAUD,kB,wCCVpCE,EAAiBV,EAAAA,GAAAA,KAAH,wGAOdW,EAAgBX,EAAAA,GAAAA,MAAH,kFAMbY,EAAoBZ,EAAAA,GAAAA,MAAH,+HAGd,qBAAGa,MAAkBC,cAIxBC,EAAgBf,EAAAA,GAAAA,MAAH,mSAIf,qBAAGa,MAAkBG,OAAOC,QACjB,oBAAGJ,MAASG,EAAZ,EAAYA,OAAZ,MACT,SADS,EAAoBE,KACpBF,EAAOG,OAASH,EAAOI,MAI7B,qBAAGP,MAAkBC,cAIH,qBAAGD,MAAkBG,OAAOK,UAIjDC,GAAmBtB,EAAAA,EAAAA,IAAOuB,EAAAA,EAAPvB,CAAH,kGC1BhBwB,EAAe,WAC1B,IAAMpB,GAAOC,EAAAA,EAAAA,MACPoB,GAAWC,EAAAA,EAAAA,MAejB,OACE,UAAChB,EAAD,CAAgBiB,SAdG,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACTC,EAAOF,EAAKG,SAASD,KAAKE,MAAMC,OAChCC,EAAQN,EAAKG,SAASG,MAAMF,MAAMC,OAClCE,EAAWP,EAAKG,SAASI,SAASH,MAAMC,OAC9C,IAAKH,IAASI,IAAUC,EACtB,OAAOC,EAAAA,GAAAA,MAAYlC,EAAKmC,SAASC,WAEnCf,EAASgB,EAAAA,GAAAA,SAAwB,CAAET,KAAAA,EAAMI,MAAAA,EAAOC,SAAAA,KAChDP,EAAKY,SAIL,WACE,UAAC/B,EAAD,YACE,SAACC,EAAD,UAAoBR,EAAKmC,SAASP,QAClC,SAACjB,EAAD,CAAe4B,aAAa,OAAOC,KAAK,OAAOZ,KAAK,aAGtD,UAACrB,EAAD,YACE,SAACC,EAAD,UAAoBR,EAAKmC,SAASH,SAClC,SAACrB,EAAD,CAAe4B,aAAa,QAAQC,KAAK,QAAQZ,KAAK,cAGxD,UAACrB,EAAD,YACE,SAACC,EAAD,UAAoBR,EAAKmC,SAASF,YAClC,SAACtB,EAAD,CACE4B,aAAa,eACbC,KAAK,WACLZ,KAAK,iBAIT,SAACV,EAAD,CAAkBuB,SAAO,EAACD,KAAK,SAA/B,SACGxC,EAAK0C,iBAAiBC,yBC3ClBC,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB7C,GAAOC,EAAAA,EAAAA,MAEb,OACE,UAACK,EAAD,CAAgBiB,SAAUsB,EAA1B,WACE,UAACtC,EAAD,YACE,SAACC,EAAD,UAAoBR,EAAKmC,SAASH,SAClC,SAACrB,EAAD,CAAe6B,KAAK,QAAQZ,KAAK,QAAQW,aAAa,cAGxD,UAAChC,EAAD,YACE,SAACC,EAAD,UAAoBR,EAAKmC,SAASF,YAClC,SAACtB,EAAD,CACE6B,KAAK,WACLZ,KAAK,WACLW,aAAa,yBAIjB,SAACrB,EAAD,CAAkBuB,SAAO,EAACD,KAAK,SAA/B,SACGxC,EAAK8C,UAAUC,uB,4FCHxB,UAjBqB,WAGnB,OAFmBC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,gBAG7B,SAAC,KAAD,CAAU/C,GAAG,YAAYgD,SAAS,KAElC,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,KACA,SAAC,KAAD","sources":["components/views/authView/AuthView.styled.js","components/views/authView/AuthPageIndicator/AuthPageIndicator.styled.js","components/views/authView/AuthPageIndicator/AuthPageIndicator.jsx","components/views/authView/AuthForm.styled.js","components/views/authView/RegisterForm/RegisterForm.jsx","components/views/authView/LoginForm/LoginForm.jsx","views/RegisterView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'components/common';\n\nexport const AuthViewContainer = styled(Container)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  height: calc(100% - 100px);\n  padding-top: 100px;\n`;\n","import styled from 'styled-components';\n\nexport const AuthPageIndicatorStyled = styled.div`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 30px;\n\n  text-transform: uppercase;\n`;\n","import { useLang } from 'hooks';\n\nimport { AuthPageIndicatorStyled } from './AuthPageIndicator.styled';\nimport { NavLinkStyled } from 'components/Navigation/Navigation.styled';\n\nexport const AuthPageIndicator = () => {\n  const lang = useLang();\n\n  return (\n    <AuthPageIndicatorStyled>\n      <NavLinkStyled to=\"/register\">\n        {lang.registerView.currentPage}\n      </NavLinkStyled>\n      <NavLinkStyled to=\"/login\">{lang.loginView.currentPage}</NavLinkStyled>\n    </AuthPageIndicatorStyled>\n  );\n};\n","import { ButtonStyled } from 'components/common/Button';\nimport styled from 'styled-components';\n\nexport const AuthFormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  max-width: 280px;\n`;\n\nexport const AuthFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const AuthFormLabelText = styled.label`\n  font-weight: 700;\n  text-transform: capitalize;\n  transition: ${({ theme }) => theme.transition};\n  transition-property: color;\n`;\n\nexport const AuthFormInput = styled.input`\n  padding: 4px 8px;\n  font-size: 1.4rem;\n\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme: { colors, mode } }) =>\n    mode === 'dark' ? colors.border : colors.bg};\n\n  border-radius: 4px;\n  outline: none;\n  transition: ${({ theme }) => theme.transition};\n  transition-property: color, background-color, box-shadow;\n\n  :focus {\n    box-shadow: 1px 2px 4px 2px ${({ theme }) => theme.colors.accent};\n  }\n`;\n\nexport const AuthButtonStyled = styled(ButtonStyled)`\n  align-self: center;\n  margin-top: 24px;\n  text-transform: uppercase;\n`;\n","// import PropTypes from 'prop-types'\n\nimport { useLang } from 'hooks';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { authOperations } from 'redux/auth';\n\nimport {\n  AuthButtonStyled,\n  AuthFormInput,\n  AuthFormLabel,\n  AuthFormStyled,\n  AuthFormLabelText,\n} from '../AuthForm.styled';\n\nexport const RegisterForm = () => {\n  const lang = useLang();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value.trim();\n    const email = form.elements.email.value.trim();\n    const password = form.elements.password.value.trim();\n    if (!name || !email || !password) {\n      return toast.error(lang.authForm.formError);\n    }\n    dispatch(authOperations.register({ name, email, password }));\n    form.reset();\n  };\n\n  return (\n    <AuthFormStyled onSubmit={handleSubmit}>\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.name}</AuthFormLabelText>\n        <AuthFormInput autoComplete=\"name\" type=\"text\" name=\"name\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.email}</AuthFormLabelText>\n        <AuthFormInput autoComplete=\"email\" type=\"email\" name=\"email\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.password}</AuthFormLabelText>\n        <AuthFormInput\n          autoComplete=\"new-password\"\n          type=\"password\"\n          name=\"password\"\n        />\n      </AuthFormLabel>\n\n      <AuthButtonStyled primary type=\"submit\">\n        {lang.registrationForm.registerButtonText}\n      </AuthButtonStyled>\n    </AuthFormStyled>\n  );\n};\n\nRegisterForm.propTypes = {};\n","import { useLang } from 'hooks';\nimport PropTypes from 'prop-types';\n\nimport {\n  AuthButtonStyled,\n  AuthFormInput,\n  AuthFormLabel,\n  AuthFormStyled,\n  AuthFormLabelText,\n} from '../AuthForm.styled';\n\nexport const LoginForm = ({ handleSubmit }) => {\n  const lang = useLang();\n\n  return (\n    <AuthFormStyled onSubmit={handleSubmit}>\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.email}</AuthFormLabelText>\n        <AuthFormInput type=\"email\" name=\"email\" autoComplete=\"email\" />\n      </AuthFormLabel>\n\n      <AuthFormLabel>\n        <AuthFormLabelText>{lang.authForm.password}</AuthFormLabelText>\n        <AuthFormInput\n          type=\"password\"\n          name=\"password\"\n          autoComplete=\"current-password\"\n        />\n      </AuthFormLabel>\n\n      <AuthButtonStyled primary type=\"submit\">\n        {lang.loginForm.loginButtonText}\n      </AuthButtonStyled>\n    </AuthFormStyled>\n  );\n};\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { authSelectors } from 'redux/auth';\n\nimport { Section } from 'components/common';\nimport {\n  AuthViewContainer,\n  RegisterForm,\n  AuthPageIndicator,\n} from 'components/views';\n\nconst RegisterView = () => {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n\n  return isLoggedIn ? (\n    <Navigate to=\"/contacts\" replace={true} />\n  ) : (\n    <Section>\n      <AuthViewContainer>\n        <AuthPageIndicator />\n        <RegisterForm />\n      </AuthViewContainer>\n    </Section>\n  );\n};\n\nRegisterView.propTypes = {};\n\nexport default RegisterView;\n"],"names":["AuthViewContainer","styled","Container","AuthPageIndicatorStyled","AuthPageIndicator","lang","useLang","to","registerView","currentPage","loginView","AuthFormStyled","AuthFormLabel","AuthFormLabelText","theme","transition","AuthFormInput","colors","text","mode","border","bg","accent","AuthButtonStyled","ButtonStyled","RegisterForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","name","elements","value","trim","email","password","toast","authForm","formError","authOperations","reset","autoComplete","type","primary","registrationForm","registerButtonText","LoginForm","handleSubmit","loginForm","loginButtonText","useSelector","authSelectors","replace"],"sourceRoot":""}
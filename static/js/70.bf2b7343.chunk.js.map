{"version":3,"file":"static/js/70.bf2b7343.chunk.js","mappings":"iRAeMA,EAAgBC,EAAAA,GAAAA,GAAH,iKAOG,qBAAGC,MAAkBC,OAAOC,OAG5CC,EAAkBJ,EAAAA,GAAAA,MAAH,uCAIfK,EAAoBL,EAAAA,GAAAA,MAAH,uCAIjBM,GAAsBN,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,8EAMnBQ,EAAU,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC3B,GAAmDC,EAAAA,EAAAA,4BAAnD,eAAOC,EAAP,KAAmCC,EAAnC,KAAwBC,UACxB,GAAmDC,EAAAA,EAAAA,4BAAnD,eAAOC,EAAP,KAAmCC,EAAnC,KAAwBH,UAElBI,EAAkB,SAAAC,GAAC,OACvBP,GAAc,QAAEJ,GAAAA,GAAKW,EAAEC,OAAOX,KAAOU,EAAEC,OAAOC,SAE1CC,EAAWT,GAAcI,EAE/B,OACE,UAACnB,EAAD,YACE,SAACK,EAAD,CACEoB,KAAK,OACLd,KAAK,OACLY,MAAOZ,EACPe,SAAUN,EACVI,SAAUA,KAGZ,SAAClB,EAAD,CACEmB,KAAK,MACLd,KAAK,SACLY,MAAOX,EACPc,SAAUN,EACVI,SAAUA,KAGZ,SAACjB,EAAD,CAAqBoB,QArBD,kBAAMT,EAAcR,IAqBOc,SAAUA,EAAzD,UACE,SAAC,MAAD,CAAgBI,KAAM,WAYxBC,EAAqB5B,EAAAA,GAAAA,GAAH,sTAMU,qBAAGC,MAAkB4B,YAAY,MAKjC,qBAAG5B,MAAkB4B,YAAY,MAM7DC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,SAACH,EAAD,UACGG,EAASC,KAAI,gBAAGvB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,SAACH,EAAD,CAAkBC,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,SAUhBwB,EAAejC,EAAAA,GAAAA,IAAH,yFAMZkC,EAAclC,EAAAA,GAAAA,MAAH,0FAMXmC,EAAcnC,EAAAA,GAAAA,MAAH,qEAKXoC,GAAoBpC,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,sBAEjBqC,GAAsBrC,EAAAA,EAAAA,IAAOsC,EAAAA,IAAaC,MAAM,CACpDC,MAAO,GACPC,OAAQ,IAFkBzC,CAAH,gEAQnB0C,EAAS,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAGnC,OACE,UAACZ,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CAAab,MAAOqB,EAAQlB,SALd,SAAAL,GAAC,OAAIwB,EAAUxB,EAAEC,OAAOC,aAQxC,SAACc,EAAD,oBAECS,IAAc,SAACR,EAAD,QA+BrB,UApBqB,WACnB,OAAuCS,EAAAA,EAAAA,wBAAzBf,EAAd,EAAQgB,KAAgBF,EAAxB,EAAwBA,WAClBG,GAAOC,EAAAA,EAAAA,MACb,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOP,EAAP,KAAeC,EAAf,KAKA,OAJAO,QAAQC,IAAI,wBAAyBT,GAErCQ,QAAQC,IAAI,0BAA2BrB,IAGrC,4BACE,uBAAIiB,EAAKK,aAAaC,cACtB,SAACZ,EAAD,CAAQG,WAAYA,EAAYF,OAAQA,EAAQC,UAAWA,IAE1Db,IAAY,SAACD,EAAD,CAAcC,SAAUA","sources":["views/ContactsView.jsx"],"sourcesContent":["import { ButtonStyled } from 'components/common/Button';\nimport React, { useState } from 'react';\n// import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { AiOutlineClose } from 'react-icons/ai';\nimport {\n  useDeleteContactMutation,\n  useReadContactsQuery,\n  useUpdateContactMutation,\n} from 'redux/contacts';\nimport { useLang } from 'hooks';\nimport { LoadingIcon } from 'components/common';\n\nconst ContactStyled = styled.li`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  padding: 4px 16px 4px 4px;\n  background-color: ${({ theme }) => theme.colors.nav};\n`;\n\nconst ContactEditName = styled.input`\n  width: 55%;\n`;\n\nconst ContactEditNumber = styled.input`\n  width: 40%;\n`;\n\nconst DeleteContactButton = styled(ButtonStyled)`\n  position: absolute;\n  top: -8px;\n  right: -12px;\n`;\n\nconst Contact = ({ id, name, number }) => {\n  const [updateContact, { isLoading: isUpdating }] = useUpdateContactMutation();\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const onUpdateContact = e =>\n    updateContact({ id, [e.target.name]: e.target.value });\n  const onDeleteContact = () => deleteContact(id);\n  const disabled = isUpdating || isDeleting;\n\n  return (\n    <ContactStyled>\n      <ContactEditName\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={onUpdateContact}\n        disabled={disabled}\n      />\n\n      <ContactEditNumber\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={onUpdateContact}\n        disabled={disabled}\n      />\n\n      <DeleteContactButton onClick={onDeleteContact} disabled={disabled}>\n        <AiOutlineClose size={20} />\n      </DeleteContactButton>\n    </ContactStyled>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nconst ContactsListStyled = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  padding: 0 4px;\n  gap: 12px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints[1]}) {\n    gap: 20px;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints[2]}) {\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n  }\n`;\n\nconst ContactsList = ({ contacts }) => {\n  return (\n    <ContactsListStyled>\n      {contacts.map(({ id, name, number }) => (\n        <Contact key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactsListStyled>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n\nconst FilterStyled = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nconst FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 280px;\n`;\n\nconst FilterInput = styled.input`\n  width: 100%;\n  background-color: tomato;\n`;\n\nconst ClearFilterButton = styled(ButtonStyled)``;\n\nconst LoadingIconAbsolute = styled(LoadingIcon).attrs({\n  width: 30,\n  height: 20,\n})`\n  position: absolute;\n  right: -28px;\n`;\n\nconst Filter = ({ filter, setFilter, isFetching }) => {\n  const onSetFilter = e => setFilter(e.target.value);\n\n  return (\n    <FilterStyled>\n      <FilterLabel>\n        <FilterInput value={filter} onChange={onSetFilter} />\n      </FilterLabel>\n\n      <ClearFilterButton>Clear</ClearFilterButton>\n\n      {isFetching && <LoadingIconAbsolute />}\n    </FilterStyled>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n};\n\nconst ContactsView = () => {\n  const { data: contacts, isFetching } = useReadContactsQuery();\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  console.log('ContactsView ~ filter', filter);\n\n  console.log('ContactsView ~ contacts', contacts);\n\n  return (\n    <div>\n      <p>{lang.contactsView.filterDesc}</p>\n      <Filter isFetching={isFetching} filter={filter} setFilter={setFilter} />\n\n      {contacts && <ContactsList contacts={contacts} />}\n    </div>\n  );\n};\n\nContactsView.propTypes = {};\n\nexport default ContactsView;\n"],"names":["ContactStyled","styled","theme","colors","nav","ContactEditName","ContactEditNumber","DeleteContactButton","ButtonStyled","Contact","id","name","number","useUpdateContactMutation","updateContact","isUpdating","isLoading","useDeleteContactMutation","deleteContact","isDeleting","onUpdateContact","e","target","value","disabled","type","onChange","onClick","size","ContactsListStyled","breakpoints","ContactsList","contacts","map","FilterStyled","FilterLabel","FilterInput","ClearFilterButton","LoadingIconAbsolute","LoadingIcon","attrs","width","height","Filter","filter","setFilter","isFetching","useReadContactsQuery","data","lang","useLang","useState","console","log","contactsView","filterDesc"],"sourceRoot":""}